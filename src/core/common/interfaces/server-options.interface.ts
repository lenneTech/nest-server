import { GqlModuleOptions } from '@nestjs/graphql';
import { JwtModuleOptions } from '@nestjs/jwt';
import { ServeStaticOptions } from '@nestjs/platform-express/interfaces/serve-static-options.interface';
import { TypeOrmModuleOptions } from '@nestjs/typeorm';

/**
 * Options for the server
 */
export interface IServerOptions {

  /**
   * Environment
   * e.g. 'development'
   */
  env: string;

  /**
   * Configuration of the GraphQL module
   * see https://docs.nestjs.com/graphql/quick-start
   */
  graphQl: {

    /**
     * Autogenerated schema file
     * e.g. 'schema.gql'
     */
    autoSchemaFile: string,

    /**
     * Function for context manipulation
     * e.g. ({ req }) => ({ req })
     */
    context: (context: { [key: string]: any, req: any }) => { [key: string]: any, req: any },

    /**
     * Determines whether or not to install subscription handlers
     * e.g. true
     */
    installSubscriptionHandlers: boolean,
  } & GqlModuleOptions;

  /**
   * Configuration of JavaScript Web Token (JWT) module
   */
  jwt: {

    /**
     * Secret to encrypt the JWT
     */
    secretOrPrivateKey: string,
  } & JwtModuleOptions;

  /**
   * Port number of the server
   * e.g. 8080
   */
  port: number;

  /**
   * SMTP and template configuration for sending emails
   */
  email: {

    /**
     * SMTP configuration for sending emails
     * smtps://[userOrApiKey]:[passwordOrSecretKey]@[domainOrIP]
     */
    smtp: {

      /**
       * Domain or IP of the SMTP server
       */
      domainOrIP: string,

      /**
       * Password of the SMTP user or secret key of the provider
       */
      passwordOrSecretKey: string,

      /**
       * Email address of the SMTP user or API key of the provider
       * e.g. support@lenne.tech
       */
      userOrApiKey: string,
    },

    /**
     * Handlebar templates for emails
     */
    template: {
      /**
       * Directory for templates
       *  e.g. join(__dirname, '..', 'templates')
       */
      path: string,
    },
  };

  /**
   * Configuration for useStaticAssets
   */
  staticAssets: {
    /**
     * Root directory for static assets
     * e.g. join(__dirname, '..', 'public')
     */
    path: string

    /**
     * Additional options for useStaticAssets
     * e.g. {prefix: '/public/'}
     */
    options?: ServeStaticOptions,
  };

  /**
   * Configuration of TypeORM
   * see https://github.com/typeorm/typeorm/blob/master/docs/connection-options.md
   */
  typeOrm: {

    /**
     * Type of database
     * e.g. 'mongodb'
     */
    type: string,

    /**
     * Host of the database
     * e.g. 'localhost'
     */
    host: string,

    /**
     * Port of the database
     * e.g. 27017
     */
    port: number,

    /**
     * Name of the database
     * e.g. 'my-project'
     */
    database: string,

    /**
     * Indicates if database schema should be auto created on every application launch
     * e.g. false
     */
    synchronize: boolean,

    /**
     * Entities to be loaded and used for this connection
     * e.g. [Post, Category, 'entity/*.js', 'modules/** /entity/*.js']
     */
    entities: string[],

    /**
     * Determines whether or not to use the new url parser
     * e.g. true
     */
    useNewUrlParser: boolean,
  } & TypeOrmModuleOptions;

  /**
   * Determines whether or not to integrate models from the module
   * additionally into TypeORM
   */
  typeOrmModelIntegration: boolean;
}
