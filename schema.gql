# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""Auth"""
type Auth {
  """JavaScript Web Token (JWT)"""
  token: String!

  """User who signed in"""
  user: User!
}

"""Combination of multiple filters via logical operator"""
input CombinedFilterInput {
  """
  Logical Operator to combine filters. If set the `filters` must be also set.
  """
  logicalOperator: LogicalOperatorEnum

  """
  Filters to combine via logical operator. If set `logicalOperator` must be also set.
  """
  filters: [FilterInput!]
}

"""
[Comparison Operators](https://docs.mongodb.com/manual/reference/operator/query-comparison/) for filters
"""
enum ComparisonOperatorEnum {
  EQ
  GT
  GTE
  IN
  LT
  LTE
  NE
  NIN
  REGEX
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""
Input for filtering. The `singleFilter` will be ignored if the `combinedFilter` is set.
"""
input FilterInput {
  """Combination of multiple filters via logical operator"""
  combinedFilter: CombinedFilterInput

  """Filter for a single property"""
  singleFilter: SingleFilterInput
}

"""
JSON scalar type. Information on the exact schema of the JSON object is contained in the description of the field.
"""
scalar JSON

"""Logical operators to combine filters"""
enum LogicalOperatorEnum {
  AND
  NOR
  OR
}

type Mutation {
  """Create a new user"""
  createUser(input: UserCreateInput!): User!

  """Update existing user"""
  updateUser(id: String!, input: UserInput!): User!

  """Delete existing user"""
  deleteUser(id: String!): User!
}

type Query {
  """Get JWT token"""
  signIn(password: String!, email: String!): Auth!

  """Get user with specified ID"""
  getUser(id: String!): User!

  """Find users (via filter)"""
  findUsers(
    """
    Limit specifies the maximum number of elements found that are to be returned
    """
    take: Int = 25

    """Skip specifies how many found elements should be skipped on return"""
    skip: Int = 0

    """Sorting the returned elements"""
    sort: [SortInput!]

    """Input for filtering"""
    filter: FilterInput
  ): [User!]!
}

"""Input for a configuration of a filter"""
input SingleFilterInput {
  """Name of the property to be used for the filter"""
  field: String!

  """
  [Negate operator](https://docs.mongodb.com/manual/reference/operator/query/not/)
  """
  not: Boolean

  """
  [Comparison operator](https://docs.mongodb.com/manual/reference/operator/query-comparison/)
  """
  operator: ComparisonOperatorEnum!

  """
  [Options](https://docs.mongodb.com/manual/reference/operator/query/regex/#op._S_options) for [REGEX](https://docs.mongodb.com/manual/reference/operator/query/regex/) operator
  """
  options: String

  """Value of the property"""
  value: JSON!
}

"""Sorting the returned elements"""
input SortInput {
  """Field that is to be used for sorting"""
  field: String!

  """SortInput order of the field"""
  order: SortOrderEnum!
}

"""SortInput order of items"""
enum SortOrderEnum {
  ASC
  DESC
}

type Subscription {
  userCreated: User!
}

"""User"""
type User {
  """ID of the persistence object"""
  id: ID

  """Created date"""
  createdAt: DateTime

  """Users who own the object"""
  ownerIds: [String!]

  """Updated date"""
  updatedAt: DateTime

  """Email of the user"""
  email: String

  """First name of the user"""
  firstName: String

  """Last name of the user"""
  lastName: String

  """Roles of the user"""
  roles: [String!]

  """Username of the user"""
  username: String

  """URL to avatar file of the user"""
  avatar: String

  """User who created the object"""
  createdBy: User

  """Labels of the object"""
  labels: [String!]

  """Tags for the object"""
  tags: [String!]

  """User who last updated the object"""
  updatedBy: User
}

"""User input to create a new user"""
input UserCreateInput {
  """Email of the user"""
  email: String!

  """First name of the user"""
  firstName: String

  """Last name of the user"""
  lastName: String

  """Roles of the user"""
  roles: [String!] = []

  """Username / alias of the user"""
  username: String

  """Password of the user"""
  password: String
}

"""User input"""
input UserInput {
  """Email of the user"""
  email: String

  """First name of the user"""
  firstName: String

  """Last name of the user"""
  lastName: String

  """Roles of the user"""
  roles: [String!] = []

  """Username / alias of the user"""
  username: String

  """Password of the user"""
  password: String
}
